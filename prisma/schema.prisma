generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CONSUMER
  COOP
  PRODUCER
}

enum OrderStatus {
  // Initial states
  PENDING // equivalent of our old order status = 0
  PAYMENT_FAILED

  // Scheduling states
  BUYER_PROPOSED_TIME //AND_LOC // order is placed with a pick up / delivery time

  // If delivery
  SELLER_PROPOSED_DELIVERY_FEE

  BUYER_ACCEPTED // if the seller proposes a new time, buyer accepted it, this allows for the conversation to go back and forth
  BUYER_RESCHEDULED // if the seller proposes a new time, buyer rejects it, this allows for the conversation to go back and forth
  SELLER_ACCEPTED // if the seller accepts to buyers proposed time, this allows for the conversation to go back and forth
  SELLER_RESCHEDULED // if the buyer proposes a new time, seller rejects it, this allows for the conversation to go back and forth

  // In the event they agree on a time, but the buyer never pays for it
  SCHEDULE_CONFIRMED
  SCHEDULE_CONFIRMED_PAID

  // Fulfillment states
  SELLER_PREPARING // seller is preparing the order for pickup 
  SELLER_PREPARING_EXPIRED // seller took longer than SODT to get order ready??

  IN_TRANSIT
  DELIVERED
  DELIVERY_CONFIRMED

  READY_FOR_PICKUP
  PICKED_UP

  // Final states
  COMPLETED
  CANCELED
  REFUNDED

  // Issue states
  DISPUTED
  DISPUTE_UNDER_REVIEW

  DISPUTE_IN_SELLER_FAVOR
  DISPUTE_IN_BUYER_FAVOR

  ADMIN_RESOLVED_DISPUTE
  BUYER_RESOLVED_DISPUTE
  SELLER_RESOLVED_DISPUTE
  ADMIN_MESSAGE
  HARVEST
  IMG

  DISPUTEE_RESPONDED
  DISPUTER_RESPONDED

  BUYER_NO_SHOW // If the buyer doesn't show up for pickup
  SELLER_NO_SHOW // If the seller doesn't make the order available at the agreed time
}

type OrderHistory {
  status OrderStatus
  date   DateTime    @default(now())
}

enum DisputeReason {
  NO_DELIVERY
  SCHEDULING_EXPIRED
  SELLER_PREPARING_EXPIRED
  SPOILED
  OTHER
}

enum Notification {
  SMS_ALL_ORDERS
  EMAIL_ALL_ORDERS
  SMS_NEW_ORDERS
  EMAIL_NEW_ORDERS
  SMS_ORDER_UPDATES
  EMAIL_ORDER_UPDATES
  SMS_ORDER_CANCELED
  EMAIL_ORDER_CANCELED
  SMS_ORDER_COMPLETED
  EMAIL_ORDER_COMPLETED
  SMS_FOLLOWED_USER_LISTING
  EMAIL_FOLLOWED_USER_LISTING
  SMS_NEW_PRODUCER_LISTINGS
  EMAIL_NEW_PRODUCER_LISTINGS
}

type notifList {
  list String[]
}

type LocationObj {
  type        String
  coordinates Float[]
  address     String[]
  hours       Hours?
  role        UserRole @default(CONSUMER)
  isDefault   Boolean? @default(false)
}

type Hours {
  delivery Availability[]
  pickup   Availability[]
}

type TimeSlot {
  open  Int
  close Int
}

type Availability {
  date      DateTime
  timeSlots TimeSlot[]
  capacity  Int?
}

type OpenCloseTemplates {
  title     String
  timeSlots TimeSlot[]
}

type pickupDate {
  date DateTime
  time Int
}

type FullName {
  first String
  last  String
}

model OrderGroup {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  orderids String[]
  startLoc Float[]
  endLoc   Float[]
}

type Coordinates {
  lat Float
  lng Float
}

type Address {
  street String
  city   String
  state  String
  zip    String
}

model Location {
  //mandatory
  id                  String      @id @default(auto()) @map("_id") @db.ObjectId
  userId              String      @db.ObjectId
  type                String
  coordinates         Coordinates
  address             Address
  hours               Hours
  role                UserRole    @default(PRODUCER)
  isDefault           Boolean     @default(false)
  SODT                Int?
  showPreciseLocation Boolean     @default(false)
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  // not required
  bio                 String
  name                String
  image               String?
  baskets             Basket[]
  user                User        @relation(fields: [userId], references: [id])
  listings            Listing[]
  orders              Order[]
}

model User {
  //mandatory
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  email                 String                 @unique
  role                  UserRole               @default(PRODUCER)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  //not required
  fullName              FullName?
  emailVerified         DateTime?
  phone                 String?
  image                 String?
  password              String?
  stripeAccountId       String?
  totalPaidOut          Int?
  url                   String?
  favoriteIds           String[]               @db.ObjectId
  notifications         Notification[]
  accounts              Account[]
  sessions              Session[]
  locations             Location[]
  listings              Listing[]
  baskets               Basket[]
  following             Following?
  buyerOrders           Order[]                @relation("buyer")
  sellerOrders          Order[]                @relation("seller")
  sentMessages          Message[]
  openCloseTemplates    OpenCloseTemplates[]
  twoFactorConfirmation TwoFactorConfirmation?
  subscriptions         String?
  hasPickedRole         Boolean?
  canRecievePayouts     Boolean?               @default(false)
}

model Following {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  userId  String   @db.ObjectId
  follows String[]
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Reviews {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  reviewerId String  @db.ObjectId
  reviewedId String  @db.ObjectId
  buyer      Boolean
  review     String
  rating     Int
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid()) @map("_id")

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Listing {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  locationId      String?  @db.ObjectId
  SODT            Int? //set out and delivery time for co-ops/producers respectively expressed as an interger
  title           String
  category        String // "homemade", "unprocessed-produce", "dairy-meats", "durables" 
  subCategory     String
  stock           Int
  shelfLife       Int // -1 means no shelf life
  minOrder        Int
  unit            String
  price           Float
  description     String
  projectedStock  Int?
  harvestFeatures Boolean?
  review          Boolean?
  harvestType     String?
  reports         Int?
  rating          Int[]
  createdAt       DateTime @default(now())
  harvestDates    String[]
  tags            String[]
  images          String[]
  emailList       String[]
  smsList         String[]

  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  basketItem         BasketItem[]
  recentlyViewedItem RecentlyViewedItem[]
  location           Location?            @relation(fields: [locationId], references: [id], onDelete: SetNull)
}

enum orderMethod {
  PICKUP
  DELIVERY
}

enum basketStatus {
  ACTIVE
  SAVED_FOR_LATER
  EXPIRED
  CONVERTED_TO_ORDER
}

enum basket_time_type {
  ASAP
  CUSTOM
}

model RecentlyViewedItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  listingId String   @db.ObjectId
  quantity  Int      @default(1)
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([listingId])
}

model BasketItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  basketId  String   @db.ObjectId
  userId    String   @db.ObjectId
  basket    Basket   @relation("BasketToItems", fields: [basketId], references: [id], onDelete: Cascade)
  listingId String   @db.ObjectId
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  quantity  Int      @default(1)
  price     Int // price in cents  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([basketId, listingId])
}

type proposedLoc {
  coordinates Float[]
  address     String[]
}

model Basket {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  userId       String           @db.ObjectId
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  locationId   String           @db.ObjectId
  location     Location         @relation(fields: [locationId], references: [id], onDelete: Cascade)
  proposedLoc  proposedLoc?
  items        BasketItem[]     @relation("BasketToItems")
  pickupDate   DateTime?
  deliveryDate DateTime?
  orderMethod  orderMethod      @default(PICKUP)
  status       basketStatus     @default(ACTIVE)
  notes        String?
  time_type    basket_time_type @default(ASAP)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@unique([userId, locationId])
}

model TransactionHistory {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  orderId    String @db.ObjectId
  totalPrice Float
}

type Fees {
  site     Float?
  delivery Float?
  other    Float[]
}

type OrderLoc {
  address     String[]
  coordinates Float[]
}

enum fulfillmentType {
  DELIVERY
  PICKUP
}

model Order {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId

  sellerId String @db.ObjectId

  pickupDate      DateTime?
  deliveryDate    DateTime?
  paymentIntentId String?

  totalPrice  Float
  status      OrderStatus @default(PENDING)
  items       Json
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  completedAt DateTime?

  fee                 Fees?
  conversationId      String?         @db.ObjectId
  payments            Payment[]
  history             OrderHistory[]
  dispute             Dispute?
  buyer               User            @relation(name: "buyer", fields: [userId], references: [id])
  seller              User            @relation(name: "seller", fields: [sellerId], references: [id])
  fulfillmentType     fulfillmentType
  proposedLoc         OrderLoc?
  preferredLocationId String?         @db.ObjectId
  actualLocationId    String?         @db.ObjectId
  deliveryNotes       String?

  location   Location? @relation(fields: [locationId], references: [id])
  locationId String?   @db.ObjectId
}

model Payment {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId               String   @db.ObjectId
  stripePaymentIntentId String
  amount                Float
  status                String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model StripeIntents {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  paymentIds String[] @db.ObjectId
}

model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())

  participantIds String[]  @db.ObjectId
  messages       Message[]
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  body           String?
  image          String?
  createdAt      DateTime     @default(now())
  messageOrder   OrderStatus
  listingId      String?      @db.ObjectId
  seen           Boolean      @default(false)
  fee            Float?
  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id])
}

model Dispute {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String        @unique @db.ObjectId
  userId      String        @db.ObjectId
  email       String
  phone       String
  status      OrderStatus   @default(DISPUTED)
  images      String[]
  reason      DisputeReason
  explanation String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  order       Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Suggestion {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  category    String
  subCategory String
  createAt    DateTime @default(now())
}
